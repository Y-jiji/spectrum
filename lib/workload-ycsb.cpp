#include "./workload-ycsb.hpp"
#include "./hex.hpp"
#include <fmt/core.h>
#include <glog/logging.h>
#include <optional>

namespace spectrum {

YCSB::YCSB(size_t num_elements, double zipf_exponent): 
    evm_type{EVMType::STRAWMAN},
    rng{std::unique_ptr<Random>(new ThreadLocalRandom([&](){return (zipf_exponent > 0.0 ? 
        std::unique_ptr<Random>(new Zipf(num_elements, zipf_exponent)) : 
        std::unique_ptr<Random>(new Unif(num_elements))
    );}, std::thread::hardware_concurrency()))}
{
    LOG(INFO) << fmt::format("YCSB({}, {})", num_elements, zipf_exponent);
    this->code = spectrum::from_hex(std::string{
        "608060405234801561000f575f80fd5b506004361061003f575f3560e01c80639507d39a14610043578063a5843f0814610073578063f3d7af721461008f575b5f80fd5b61005d6004803603810190610058919061018a565b6100ab565b60405161006a91906101c4565b60405180910390f35b61008d600480360381019061008891906101dd565b6100c4565b005b6100a960048036038101906100a4919061021b565b6100dd565b005b5f805f8381526020019081526020015f20549050919050565b805f808481526020019081526020015f20819055505050565b805f808c81526020019081526020015f2081905550805f808a81526020019081526020015f2081905550805f808881526020019081526020015f2081905550805f808681526020019081526020015f2081905550805f808481526020019081526020015f20819055505050505050505050505050565b5f80fd5b5f819050919050565b61016981610157565b8114610173575f80fd5b50565b5f8135905061018481610160565b92915050565b5f6020828403121561019f5761019e610153565b5b5f6101ac84828501610176565b91505092915050565b6101be81610157565b82525050565b5f6020820190506101d75f8301846101b5565b92915050565b5f80604083850312156101f3576101f2610153565b5b5f61020085828601610176565b925050602061021185828601610176565b9150509250929050565b5f805f805f805f805f805f6101608c8e03121561023b5761023a610153565b5b5f6102488e828f01610176565b9b505060206102598e828f01610176565b9a5050604061026a8e828f01610176565b995050606061027b8e828f01610176565b985050608061028c8e828f01610176565b97505060a061029d8e828f01610176565b96505060c06102ae8e828f01610176565b95505060e06102bf8e828f01610176565b9450506101006102d18e828f01610176565b9350506101206102e38e828f01610176565b9250506101406102f58e828f01610176565b9150509295989b509295989b909396995056fea2646970667358221220fe2c4d0dd3b6a804f2d64307e99976b8043f9ccdf248b8c3ad094c2c3c4dfa5b64736f6c63430008180033"
    }).value();
}

void YCSB::SetEVMType(EVMType ty) { this->evm_type = ty; }

inline std::string to_string(uint32_t key) {
    auto ss = std::ostringstream();
    ss << std::setw(64) << std::setfill('0') << key;
    return ss.str();
}

Transaction YCSB::Next() {
    DLOG(INFO) << "ycsb next" << std::endl;
    auto guard = std::lock_guard{mu};
#define X to_string(rng->Next())
    auto input = spectrum::from_hex([&]() {
        //  10 key 5 read 5 write(may be blind)
        std::stringstream ss;
        ss << std::string{"f3d7af72"};
        for (int i = 0; i < 10; i++) { ss << X; }
        ss << X; // val
        return ss.str();
    }()).value();
#undef X
    return Transaction(this->evm_type, evmc::address{0x1}, evmc::address{0x1},
                       std::span{code}, std::span{input});
}

} // namespace spectrum
